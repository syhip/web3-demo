
import React, { useState, useEffect } from 'react';  // 模拟的合约地址和用户钱包地址 const MOCK_GAT_CONTRACT_ADDRESS = '0xGATContractAddress...'; const MOCK_SUSD_VAULT_CONTRACT_ADDRESS = '0xsUSDVaultContractAddress...'; const MOCK_USDC_CONTRACT_ADDRESS = '0xUSDCContractAddress...'; // 假设的USDC合约地址  function App() {     // 模拟的钱包连接状态和用户地址     const [isConnected, setIsConnected] = useState(false);     const [userAddress, setUserAddress] = useState('');      // 模拟的用户代币余额和金库余额     const [gatBalance, setGatBalance] = useState(0);     const [susdBalance, setSusdBalance] = useState(0);     const [usdcInWallet, setUsdcInWallet] = useState(1000); // 模拟用户钱包中的USDC     const [vaultUsdcBalance, setVaultUsdcBalance] = useState(0); // 模拟金库中的USDC      // 存款和取款输入框的值     const [depositAmount, setDepositAmount] = useState('');     const [withdrawAmount, setWithdrawAmount] = useState('');      // 消息提示     const [message, setMessage] = useState('');     const [messageType, setMessageType] = useState(''); // 'success' or 'error'      // 模拟钱包连接     const connectWallet = () => {         // 在真实应用中，这里会连接 MetaMask 等钱包         // 成功连接后，获取用户地址并设置连接状态         const mockAddress = '0xUserWalletAddress1234567890abcdef';         setUserAddress(mockAddress);         setIsConnected(true);         setMessage('钱包已连接！');         setMessageType('success');         // 模拟加载初始余额         loadBalances(mockAddress);     };      // 模拟加载余额     const loadBalances = (address) => {         // 在真实应用中，这里会调用智能合约的 balanceOf 方法         console.log(`模拟加载 ${address} 的余额...`);         setGatBalance(Math.floor(Math.random() * 10000000)); // 模拟一个随机的GAT余额         setSusdBalance(Math.floor(Math.random() * 500)); // 模拟一个随机的sUSD余额         // usdcInWallet 已经初始化为 1000         setVaultUsdcBalance(Math.floor(Math.random() * 2000)); // 模拟金库中的USDC余额     };      // 模拟存款操作 (USDC -> sUSD)     const handleDeposit = () => {         const amount = parseFloat(depositAmount);         if (isNaN(amount) || amount <= 0) {             setMessage('请输入有效的存款金额！');             setMessageType('error');             return;         }         if (usdcInWallet < amount) {             setMessage('钱包中USDC不足！');             setMessageType('error');             return;         }          setMessage('正在处理存款...');         setMessageType('');          // 模拟合约调用         setTimeout(() => {             // 在真实应用中，这里会调用 sUSDVault.deposit(amount)             setUsdcInWallet(prev => prev - amount);             setSusdBalance(prev => prev + amount);             setVaultUsdcBalance(prev => prev + amount);             setMessage(`成功存入 ${amount} USDC，铸造了 ${amount} sUSD！`);             setMessageType('success');             setDepositAmount('');         }, 1500); // 模拟网络延迟     };      // 模拟取款操作 (sUSD -> USDC)     const handleWithdraw = () => {         const amount = parseFloat(withdrawAmount);         if (isNaN(amount) || amount <= 0) {             setMessage('请输入有效的取款金额！');             setMessageType('error');             return;         }         if (susdBalance < amount) {             setMessage('sUSD余额不足！');             setMessageType('error');             return;         }         if (vaultUsdcBalance < amount) {             setMessage('金库USDC储备不足！');             setMessageType('error');             return;         }          setMessage('正在处理取款...');         setMessageType('');          // 模拟合约调用         setTimeout(() => {             // 在真实应用中，这里会调用 sUSDVault.withdraw(amount)             setUsdcInWallet(prev => prev + amount);             setSusdBalance(prev => prev - amount);             setVaultUsdcBalance(prev => prev - amount);             setMessage(`成功销毁 ${amount} sUSD，赎回了 ${amount} USDC！`);             setMessageType('success');             setWithdrawAmount('');         }, 1500); // 模拟网络延迟     };      // 初始加载时，如果已连接，则加载余额     useEffect(() => {         if (isConnected && userAddress) {             loadBalances(userAddress);         }     }, [isConnected, userAddress]);      return (         <div className="min-h-screen bg-gradient-to-br from-blue-900 to-purple-900 text-white font-inter p-4 sm:p-8 flex items-center justify-center">             <div className="bg-gray-800 bg-opacity-70 backdrop-blur-sm rounded-2xl shadow-xl p-6 sm:p-10 w-full max-w-2xl border border-gray-700">                 <h1 className="text-3xl sm:text-4xl font-bold text-center mb-8 text-blue-300">                     Global Alpha Protocol                 </h1>                  {/* 消息提示区域 */}                 {message && (                     <div className={`p-3 mb-6 rounded-lg text-center ${messageType === 'success' ? 'bg-green-600' : 'bg-red-600'} bg-opacity-80`}>                         {message}                     </div>                 )}                  {!isConnected ? (                     <div className="text-center">                         <p className="text-lg mb-6">连接您的钱包以开始交互。</p>                         <button                             onClick={connectWallet}                             className="w-full sm:w-auto px-8 py-3 bg-blue-600 hover:bg-blue-700 text-white font-semibold rounded-xl shadow-lg transition-all duration-300 ease-in-out transform hover:scale-105"                         >                             连接钱包                         </button>                     </div>                 ) : (                     <div>                         <div className="mb-8 text-center text-gray-300">                             <p className="text-sm">                                 连接地址: <span className="font-mono text-blue-400 break-all">{userAddress}</span>                             </p>                             <p className="text-sm">                                 GAT 合约: <span className="font-mono text-green-400 break-all">{MOCK_GAT_CONTRACT_ADDRESS}</span>                             </p>                             <p className="text-sm">                                 sUSD Vault 合约: <span className="font-mono text-purple-400 break-all">{MOCK_SUSD_VAULT_CONTRACT_ADDRESS}</span>                             </p>                         </div>                          {/* 余额显示 */}                         <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">                             <div className="bg-gray-700 bg-opacity-50 p-6 rounded-xl shadow-md border border-gray-600">                                 <h2 className="text-xl font-semibold mb-3 text-blue-200">我的余额</h2>                                 <p className="text-lg mb-2">GAT: <span className="font-bold text-yellow-300">{gatBalance.toLocaleString()}</span></p>                                 <p className="text-lg mb-2">sUSD: <span className="font-bold text-green-300">{susdBalance.toLocaleString()}</span></p>                                 <p className="text-lg">钱包USDC: <span className="font-bold text-indigo-300">{usdcInWallet.toLocaleString()}</span></p>                             </div>                             <div className="bg-gray-700 bg-opacity-50 p-6 rounded-xl shadow-md border border-gray-600">                                 <h2 className="text-xl font-semibold mb-3 text-blue-200">金库状态</h2>                                 <p className="text-lg">金库USDC储备: <span className="font-bold text-orange-300">{vaultUsdcBalance.toLocaleString()}</span></p>                                 <p className="text-sm text-gray-400 mt-2">                                     <span className="font-mono">{MOCK_USDC_CONTRACT_ADDRESS}</span>                                 </p>                             </div>                         </div>                          {/* 存款和取款操作 */}                         <div className="grid grid-cols-1 md:grid-cols-2 gap-6">                             {/* 存款卡片 */}                             <div className="bg-gray-700 bg-opacity-50 p-6 rounded-xl shadow-md border border-gray-600">                                 <h2 className="text-xl font-semibold mb-4 text-blue-200">存入 USDC 铸造 sUSD</h2>                                 <input                                     type="number"                                     placeholder="输入 USDC 金额"                                     value={depositAmount}                                     onChange={(e) => setDepositAmount(e.target.value)}                                     className="w-full p-3 mb-4 bg-gray-900 bg-opacity-60 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500"                                 />                                 <button                                     onClick={handleDeposit}                                     className="w-full px-6 py-3 bg-green-600 hover:bg-green-700 text-white font-semibold rounded-xl shadow-lg transition-all duration-300 ease-in-out transform hover:scale-105"                                 >                                     存入 USDC                                 </button>                             </div>                              {/* 取款卡片 */}                             <div className="bg-gray-700 bg-opacity-50 p-6 rounded-xl shadow-md border border-gray-600">                                 <h2 className="text-xl font-semibold mb-4 text-blue-200">销毁 sUSD 赎回 USDC</h2>                                 <input                                     type="number"                                     placeholder="输入 sUSD 金额"                                     value={withdrawAmount}                                     onChange={(e) => setWithdrawAmount(e.target.value)}                                     className="w-full p-3 mb-4 bg-gray-900 bg-opacity-60 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500"                                 />                                 <button                                     onClick={handleWithdraw}                                     className="w-full px-6 py-3 bg-red-600 hover:bg-red-700 text-white font-semibold rounded-xl shadow-lg transition-all duration-300 ease-in-out transform hover:scale-105"                                 >                                     赎回 USDC                                 </button>                             </div>                         </div>                     </div>                 )}                  <div className="mt-10 text-center text-gray-500 text-sm">                     <p>此界面仅为模拟，不与实际区块链交互。</p>                     <p>智能合约地址和余额均为占位符。</p>                 </div>             </div>         </div>     ); }  export default App; 
